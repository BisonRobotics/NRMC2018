#include "ros/ros.h"
#include "sensor_msgs/JointState.h"
#include "std_msgs/String.h"

ros::Publisher *pub;

const double backhoe_positions[] = {0.000000,0.003931,0.007862,0.011793,0.015724,0.019655,0.023586,0.027516,0.031447,0.035378,0.039309,0.043240,0.047171,0.051102,0.055033,0.058964,0.062895,0.066826,0.070757,0.074688,0.078618,0.082549,0.086480,0.090411,0.094342,0.098273,0.102204,0.106135,0.110066,0.113997,0.117928,0.121859,0.125789,0.129720,0.133651,0.137582,0.141513,0.145444,0.149375,0.153306,0.157237,0.161168,0.165099,0.169030,0.172961,0.176891,0.180822,0.184753,0.188684,0.192615,0.196546,0.200477,0.204408,0.208339,0.212270,0.216201,0.220132,0.224063,0.227993,0.231924,0.235855,0.239786,0.243717,0.247648,0.251579,0.255510,0.259441,0.263372,0.267303,0.271234,0.275165,0.279095,0.283026,0.286957,0.290888,0.294819,0.298750,0.302681,0.306612,0.310543,0.314474,0.318405,0.322336,0.326267,0.330197,0.334128,0.338059,0.341990,0.345921,0.349852,0.353783,0.357714,0.361645,0.365576,0.369507,0.373438,0.377368,0.381299,0.385230,0.389161,0.393092,0.397023,0.400954,0.404885,0.408816,0.412747,0.416678,0.420609,0.424540,0.428470,0.432401,0.436332,0.440263,0.444194,0.448125,0.452056,0.455987,0.459918,0.463849,0.467780,0.471711,0.475642,0.479572,0.483503,0.487434,0.491365,0.495296,0.499227,0.503158,0.507089,0.511020,0.514951,0.518882,0.522813,0.526744,0.530674,0.534605,0.538536,0.542467,0.546398,0.550329,0.554260,0.558191,0.562122,0.566053,0.569984,0.573915,0.577845,0.581776,0.585707,0.589638,0.593569,0.597500,0.601431,0.605362,0.609293,0.613224,0.617155,0.621086,0.625017,0.628947,0.632878,0.636809,0.640740,0.644671,0.648602,0.652533,0.656464,0.660395,0.664326,0.668257,0.672188,0.676119,0.680049,0.683980,0.687911,0.691842,0.695773,0.699704,0.703635,0.707566,0.711497,0.715428,0.719359,0.723290,0.727221,0.731151,0.735082,0.739013,0.742944,0.746875,0.750806,0.754737,0.758668,0.762599,0.766530,0.770461,0.774392,0.778323,0.782253,0.786184,0.790115,0.794046,0.797977,0.801908,0.805839,0.809770,0.813701,0.817632,0.821563,0.825494,0.829424,0.833355,0.837286,0.841217,0.845148,0.849079,0.853010,0.856941,0.860872,0.864803,0.868734,0.872665,0.876596,0.880526,0.884457,0.888388,0.892319,0.896250,0.900181,0.904112,0.908043,0.911974,0.915905,0.919836,0.923767,0.927698,0.931628,0.935559,0.939490,0.943421,0.947352,0.951283,0.955214,0.959145,0.963076,0.967007,0.970938,0.974869,0.978800,0.982730,0.986661,0.990592,0.994523,0.998454,1.002385,1.006316,1.010247,1.014178,1.018109,1.022040,1.025971,1.029901,1.033832,1.037763,1.041694,1.045625,1.049556,1.053487,1.057418,1.061349,1.065280,1.069211,1.073142,1.077073,1.081003,1.084934,1.088865,1.092796,1.096727,1.100658,1.104589,1.108520,1.112451,1.116382,1.120313,1.124244,1.128175,1.132105,1.136036,1.139967,1.143898,1.147829,1.151760,1.155691,1.159622,1.163553,1.167484,1.171415,1.175346,1.179277,1.183207,1.187138,1.191069,1.195000,1.198931,1.202862,1.206793,1.210724,1.214655,1.218586,1.222517,1.226448,1.230379,1.234309,1.238240,1.242171,1.246102,1.250033,1.253964,1.257895,1.261826,1.265757,1.269688,1.273619,1.277550,1.281480,1.285411,1.289342,1.293273,1.297204,1.301135,1.305066,1.308997,1.312928,1.316859,1.320790,1.324721,1.328652,1.332582,1.336513,1.340444,1.344375,1.348306,1.352237,1.356168,1.360099,1.364030,1.367961,1.371892,1.375823,1.379754,1.383684,1.387615,1.391546,1.395477,1.399408,1.403339,1.407270,1.411201,1.415132,1.419063,1.422994,1.426925,1.430856,1.434786,1.438717,1.442648,1.446579,1.450510,1.454441,1.458372,1.462303,1.466234,1.470165,1.474096,1.478027,1.481957,1.485888,1.489819,1.493750,1.497681,1.501612,1.505543,1.509474,1.513405,1.517336,1.521267,1.525198,1.529129,1.533059,1.536990,1.540921,1.544852,1.548783,1.552714,1.556645,1.560576,1.564507,1.568438,1.572369,1.576300,1.580231,1.584161,1.588092,1.592023,1.595954,1.599885,1.603816,1.607747,1.611678,1.615609,1.619540,1.623471,1.627402,1.631333,1.635263,1.639194,1.643125,1.647056,1.650987,1.654918,1.658849,1.662780,1.666711,1.670642,1.674573,1.678504,1.682435,1.686365,1.690296,1.694227,1.698158,1.702089,1.706020,1.709951,1.713882,1.717813,1.721744,1.725675,1.729606,1.733536,1.737467,1.741398,1.745329,1.749260,1.753191,1.757122,1.761053,1.764984,1.768915,1.772846,1.776777,1.780708,1.784638,1.788569,1.792500,1.796431,1.800362,1.804293,1.808224,1.812155,1.816086,1.820017,1.823948,1.827879,1.831810,1.835740,1.839671,1.843602,1.847533,1.851464,1.855395,1.859326,1.863257,1.867188,1.871119,1.875050,1.878981,1.882912,1.886842,1.890773,1.894704,1.898635,1.902566,1.906497,1.910428,1.914359,1.918290,1.922221,1.926152,1.930083,1.934013,1.937944,1.941875,1.945806,1.949737,1.953668,1.957599,1.961530,1.965461,1.969392,1.973323,1.977254,1.981185,1.985115,1.989046,1.992977,1.996908,2.000839,2.004770,2.008701,2.012632,2.016563,2.020494,2.024425,2.028356,2.032287,2.036217,2.040148,2.044079,2.048010,2.051941,2.055872,2.059803,2.063734,2.067665,2.071596,2.075527,2.079458,2.083389,2.087319,2.091250,2.095181,2.099112,2.103043,2.106974,2.110905,2.114836,2.118767,2.122698,2.126629,2.130560,2.134491,2.138421,2.142352,2.146283,2.150214,2.154145,2.158076,2.162007,2.165938,2.169869,2.173800,2.177731,2.181662,2.185592,2.189523,2.193454,2.197385,2.201316,2.205247,2.209178,2.213109,2.217040,2.220971,2.224902,2.228833,2.232764,2.236694,2.240625,2.244556,2.248487,2.252418,2.256349,2.260280,2.264211,2.268142,2.272073,2.276004,2.279935,2.283866,2.287796,2.291727,2.295658,2.299589,2.303520,2.307451,2.311382,2.315313,2.319244,2.323175,2.327106,2.331037,2.334968,2.338898,2.342829,2.346760,2.350691,2.354622,2.358553,2.362484,2.366415,2.370346,2.374277,2.378208,2.382139,2.386069,2.390000,2.393931,2.397862,2.401793,2.405724,2.409655,2.413586,2.417517,2.421448,2.425379,2.429310,2.433241,2.437171,2.441102,2.445033,2.448964,2.452895,2.456826,2.460757,2.464688,2.468619,2.472550,2.476481,2.480412,2.484343,2.488273,2.492204,2.496135,2.500066,2.503997,2.507928,2.511859,2.515790,2.519721,2.523652,2.527583,2.531514,2.535445,2.539375,2.543306,2.547237,2.551168,2.555099,2.559030,2.562961,2.566892,2.570823,2.574754,2.578685,2.582616,2.586547,2.590477,2.594408,2.598339,2.602270,2.606201,2.610132,2.614063,2.617994,2.621925,2.625856,2.629787,2.633718,2.637648,2.641579,2.645510,2.649441,2.653372,2.657303,2.661234,2.665165,2.669096,2.673027,2.676958,2.680889,2.684820,2.688750,2.692681,2.696612,2.700543,2.704474,2.708405,2.712336,2.716267,2.720198,2.724129,2.728060,2.731991,2.735922,2.739852,2.743783,2.747714,2.751645,2.755576,2.759507,2.763438,2.767369,2.771300,2.775231,2.779162,2.783093,2.787024,2.790954,2.794885,2.798816,2.802747,2.806678,2.810609,2.814540,2.818471,2.822402,2.826333,2.830264,2.834195,2.838125,2.842056,2.845987,2.849918,2.853849,2.857780,2.861711,2.865642,2.869573,2.873504,2.877435,2.881366,2.885297,2.889227,2.893158,2.897089,2.901020,2.904951,2.908882,2.912813,2.916744,2.920675,2.924606,2.928537,2.932468,2.936399,2.940329,2.944260,2.948191,2.952122,2.956053,2.959984,2.963915,2.967846,2.971777,2.975708,2.979639,2.983570,2.987501,2.991431,2.995362,2.999293,3.003224,3.007155,3.011086,3.015017,3.018948,3.022879,3.026810,3.030741,3.034672,3.038603,3.042533,3.046464,3.050395,3.054326,3.058257,3.062188,3.066119,3.070050,3.073981,3.077912,3.081843,3.085774,3.089704,3.093635,3.097566,3.101497,3.105428,3.109359,3.113290,3.117221,3.121152,3.125083,3.129014,3.132945,3.136876,3.140806,3.144737,3.148668,3.152599,3.156530,3.160461,3.164392,3.168323,3.172254,3.176185,3.180116,3.184047,3.187978,3.191908,3.195839,3.199770,3.203701,3.207632,3.211563,3.215494,3.219425,3.223356,3.227287,3.231218,3.235149,3.239080,3.243010,3.246941,3.250872,3.254803,3.258734,3.262665,3.266596,3.270527,3.274458,3.278389,3.282320,3.286251,3.290181,3.294112,3.298043,3.301974,3.305905,3.309836,3.313767,3.317698,3.321629,3.325560,3.329491,3.333422,3.337353,3.341283,3.345214,3.349145,3.353076,3.357007,3.360938,3.364869,3.368800,3.372731,3.376662,3.380593,3.384524,3.388455,3.392385,3.396316,3.400247,3.404178,3.408109,3.412040,3.415971,3.419902,3.423833,3.427764,3.431695,3.435626,3.439557,3.443487,3.447418,3.451349,3.455280,3.459211,3.463142,3.467073,3.471004,3.474935,3.478866,3.482797,3.486728,3.490659,3.494589,3.498520,3.502451,3.506382,3.510313,3.514244,3.518175,3.522106,3.526037,3.529968,3.533899,3.537830,3.541760,3.545691,3.549622,3.553553,3.557484,3.561415,3.565346,3.569277,3.573208,3.577139,3.581070,3.585001,3.588932,3.592862,3.596793,3.600724,3.604655,3.608586,3.612517,3.616448,3.620379,3.624310,3.628241,3.632172,3.636103,3.640034,3.643964,3.647895,3.651826,3.655757,3.659688,3.663619,3.667550,3.671481,3.675412,3.679343,3.683274,3.687205,3.691136,3.695066,3.698997,3.702928,3.706859,3.710790,3.714721,3.718652,3.722583,3.726514,3.730445,3.734376,3.738307,3.742237,3.746168,3.750099,3.754030,3.757961,3.761892,3.765823,3.769754,3.773685,3.777616,3.781547,3.785478,3.789409,3.793339,3.797270,3.801201,3.805132,3.809063,3.812994,3.816925,3.820856,3.824787,3.828718,3.832649,3.836580,3.840511,3.844441,3.848372,3.852303,3.856234,3.860165,3.864096,3.868027,3.871958,3.875889,3.879820,3.883751,3.887682,3.891613,3.895543,3.899474,3.903405,3.907336,3.911267,3.915198,3.919129,3.923060,3.926991};
const double bucket_positions[] = {1.488532,1.492413,1.496296,1.500182,1.504069,1.507959,1.511851,1.515745,1.519642,1.523540,1.527441,1.531344,1.535249,1.539156,1.543066,1.546977,1.550891,1.554807,1.558726,1.562646,1.566569,1.570494,1.574421,1.578351,1.582283,1.586217,1.590153,1.594091,1.598032,1.601975,1.605920,1.609867,1.613817,1.617769,1.621723,1.625680,1.629639,1.633600,1.637563,1.641529,1.645497,1.649467,1.653439,1.657414,1.661391,1.665370,1.669351,1.673335,1.677321,1.681310,1.685300,1.689293,1.693288,1.697286,1.701286,1.705288,1.709292,1.713299,1.717307,1.721318,1.725332,1.729347,1.733365,1.737386,1.741408,1.745433,1.749460,1.753489,1.757520,1.761554,1.765590,1.769628,1.773669,1.777711,1.781756,1.785803,1.789853,1.793904,1.797958,1.802014,1.806072,1.810133,1.814195,1.818260,1.822327,1.826396,1.830467,1.834541,1.838616,1.842694,1.846774,1.850856,1.854940,1.859027,1.863115,1.867205,1.871298,1.875393,1.879489,1.883588,1.887689,1.891792,1.895897,1.900004,1.904113,1.908224,1.912337,1.916452,1.920569,1.924687,1.928808,1.932931,1.937056,1.941182,1.945311,1.949441,1.953573,1.957707,1.961843,1.965981,1.970120,1.974261,1.978404,1.982549,1.986695,1.990844,1.994993,1.999145,2.003298,2.007453,2.011610,2.015768,2.019927,2.024088,2.028251,2.032415,2.036581,2.040748,2.044917,2.049087,2.053258,2.057431,2.061605,2.065781,2.069957,2.074135,2.078315,2.082495,2.086677,2.090860,2.095044,2.099229,2.103415,2.107602,2.111790,2.115979,2.120169,2.124360,2.128551,2.132744,2.136937,2.141132,2.145326,2.149522,2.153718,2.157915,2.162112,2.166310,2.170508,2.174707,2.178906,2.183106,2.187305,2.191506,2.195706,2.199906,2.204107,2.208307,2.212508,2.216708,2.220909,2.225109,2.229309,2.233509,2.237709,2.241908,2.246107,2.250305,2.254503,2.258700,2.262896,2.267092,2.271287,2.275481,2.279674,2.283866,2.288057,2.292246,2.296435,2.300622,2.304808,2.308992,2.313175,2.317356,2.321536,2.325714,2.329889,2.334063,2.338235,2.342405,2.346572,2.350737,2.354900,2.359060,2.363217,2.367372,2.371523,2.375672,2.379818,2.383960,2.388100,2.392236,2.396368,2.400497,2.404621,2.408742,2.412859,2.416972,2.421080,2.425184,2.429284,2.433378,2.437468,2.441553,2.445632,2.449706,2.453775,2.457838,2.461895,2.465946,2.469991,2.474030,2.478062,2.482087,2.486105,2.490116,2.494120,2.498117,2.502105,2.506086,2.510058,2.514023,2.517978,2.521925,2.525862,2.529791,2.533709,2.537618,2.541517,2.545405,2.549283,2.553150,2.557005,2.560849,2.564682,2.568502,2.572310,2.576105,2.579887,2.583656,2.587411,2.591151,2.594878,2.598589,2.602286,2.605967,2.609632,2.613280,2.616912,2.620527,2.624124,2.627703,2.631264,2.634805,2.638328,2.641830,2.645312,2.648773,2.652213,2.655631,2.659026,2.662399,2.665747,2.669072,2.672372,2.675647,2.678897,2.682119,2.685315,2.688483,2.691622,2.694732,2.697813,2.700864,2.703883,2.706870,2.709825,2.712747,2.715635,2.718488,2.721306,2.724087,2.726831,2.729538,2.732206,2.734834,2.737422,2.739969,2.742474,2.744936,2.747355,2.749729,2.752058,2.754340,2.756575,2.758763,2.760901,2.762990,2.765028,2.767015,2.768950,2.770831,2.772658,2.774430,2.776147,2.777807,2.779410,2.780955,2.782441,2.783867,2.785232,2.786537,2.787779,2.788960,2.790077,2.791130,2.792118,2.793042,2.793900,2.794692,2.795418,2.796077,2.796668,2.797192,2.797648,2.798035,2.798354,2.798604,2.798785,2.798898,2.798941,2.798915,2.798820,2.798656,2.798424,2.798122,2.797752,2.797313,2.796807,2.796232,2.795591,2.794882,2.794107,2.793265,2.792358,2.791385,2.790349,2.789248,2.788083,2.786857,2.785568,2.784217,2.782806,2.781336,2.779806,2.778218,2.776572,2.774869,2.773111,2.771297,2.769430,2.767509,2.765535,2.763510,2.761433,2.759307,2.757132,2.754909,2.752638,2.750321,2.747959,2.745551,2.743100,2.740606,2.738069,2.735491,2.732873,2.730215,2.727519,2.724784,2.722012,2.719203,2.716359,2.713480,2.710566,2.707620,2.704640,2.701629,2.698586,2.695513,2.692410,2.689278,2.686117,2.682929,2.679713,2.676470,2.673202,2.669908,2.666589,2.663246,2.659880,2.656490,2.653078,2.649644,2.646188,2.642711,2.639214,2.635697,2.632160,2.628604,2.625030,2.621437,2.617827,2.614199,2.610555,2.606894,2.603217,2.599524,2.595817,2.592094,2.588357,2.584605,2.580840,2.577061,2.573269,2.569465,2.565648,2.561818,2.557977,2.554124,2.550260,2.546385,2.542500,2.538604,2.534697,2.530781,2.526855,2.522920,2.518976,2.515022,2.511060,2.507090,2.503111,2.499125,2.495130,2.491128,2.487119,2.483102,2.479079,2.475048,2.471011,2.466968,2.462919,2.458863,2.454801,2.450734,2.446661,2.442583,2.438500,2.434411,2.430318,2.426220,2.422117,2.418010,2.413898,2.409782,2.405662,2.401539,2.397411,2.393279,2.389145,2.385006,2.380864,2.376719,2.372571,2.368420,2.364266,2.360110,2.355950,2.351788,2.347624,2.343457,2.339288,2.335117,2.330944,2.326768,2.322591,2.318412,2.314231,2.310049,2.305865,2.301679,2.297492,2.293304,2.289115,2.284924,2.280732,2.276540,2.272346,2.268151,2.263956,2.259760,2.255563,2.251365,2.247167,2.242968,2.238769,2.234570,2.230370,2.226170,2.221970,2.217769,2.213569,2.209368,2.205167,2.200967,2.196767,2.192566,2.188366,2.184166,2.179967,2.175767,2.171569,2.167370,2.163172,2.158975,2.154778,2.150582,2.146386,2.142191,2.137997,2.133803,2.129610,2.125418,2.121227,2.117037,2.112848,2.108659,2.104472,2.100286,2.096100,2.091916,2.087733,2.083551,2.079370,2.075191,2.071012,2.066835,2.062660,2.058485,2.054312,2.050140,2.045970,2.041801,2.037633,2.033467,2.029303,2.025139,2.020978,2.016818,2.012659,2.008503,2.004347,2.000194,1.996042,1.991891,1.987743,1.983596,1.979451,1.975307,1.971166,1.967026,1.962888,1.958751,1.954617,1.950484,1.946353,1.942225,1.938098,1.933972,1.929849,1.925728,1.921609,1.917491,1.913376,1.909262,1.905151,1.901041,1.896934,1.892828,1.888725,1.884624,1.880524,1.876427,1.872332,1.868239,1.864148,1.860059,1.855972,1.851887,1.847805,1.843724,1.839646,1.835570,1.831496,1.827424,1.823354,1.819287,1.815221,1.811158,1.807097,1.803039,1.798982,1.794928,1.790876,1.786826,1.782778,1.778733,1.774689,1.770648,1.766610,1.762573,1.758539,1.754507,1.750477,1.746449,1.742424,1.738401,1.734380,1.730362,1.726346,1.722332,1.718320,1.714311,1.710304,1.706299,1.702296,1.698296,1.694298,1.690302,1.686308,1.682317,1.678328,1.674342,1.670357,1.666375,1.662395,1.658418,1.654443,1.650470,1.646499,1.642530,1.638564,1.634600,1.630639,1.626679,1.622722,1.618768,1.614815,1.610865,1.606917,1.602971,1.599027,1.595086,1.591147,1.587210,1.583276,1.579344,1.575413,1.571486,1.567560,1.563637,1.559716,1.555797,1.551880,1.547966,1.544053,1.540143,1.536235,1.532330,1.528426,1.524525,1.520626,1.516729,1.512834,1.508942,1.505052,1.501163,1.497277,1.493393,1.489512,1.485632,1.481755,1.477879,1.474006,1.470135,1.466266,1.462399,1.458535,1.454672,1.450811,1.446953,1.443097,1.439242,1.435390,1.431540,1.427692,1.423846,1.420002,1.416160,1.412320,1.408482,1.404646,1.400812,1.396981,1.393151,1.389323,1.385497,1.381673,1.377851,1.374031,1.370213,1.366397,1.362583,1.358771,1.354960,1.351152,1.347346,1.343541,1.339738,1.335938,1.332139,1.328342,1.324546,1.320753,1.316962,1.313172,1.309384,1.305598,1.301814,1.298032,1.294251,1.290472,1.286695,1.282920,1.279147,1.275375,1.271605,1.267837,1.264070,1.260305,1.256542,1.252781,1.249021,1.245263,1.241506,1.237752,1.233998,1.230247,1.226497,1.222749,1.219002,1.215257,1.211514,1.207772,1.204031,1.200293,1.196555,1.192820,1.189086,1.185353,1.181622,1.177892,1.174164,1.170437,1.166712,1.162988,1.159266,1.155545,1.151825,1.148107,1.144390,1.140675,1.136961,1.133248,1.129537,1.125827,1.122118,1.118411,1.114704,1.111000,1.107296,1.103594,1.099893,1.096193,1.092494,1.088797,1.085101,1.081406,1.077712,1.074019,1.070328,1.066637,1.062948,1.059259,1.055572,1.051886,1.048201,1.044517,1.040834,1.037152,1.033471,1.029791,1.026112,1.022434,1.018757,1.015081,1.011406,1.007731,1.004058,1.000385,0.996713,0.993042,0.989372,0.985703,0.982034,0.978366,0.974699,0.971033,0.967367,0.963702,0.960038,0.956375,0.952712,0.949049,0.945388,0.941727,0.938066,0.934406,0.930747,0.927088,0.923429,0.919771,0.916114,0.912457,0.908800,0.905144,0.901488,0.897833,0.894178,0.890523,0.886868,0.883214,0.879560,0.875906,0.872252,0.868599,0.864946,0.861293,0.857640,0.853987,0.850334,0.846681,0.843029,0.839376,0.835723,0.832070,0.828417,0.824764,0.821111,0.817458,0.813804,0.810150,0.806496,0.802842,0.799188,0.795533,0.791877,0.788222,0.784566,0.780909,0.777252,0.773595,0.769937,0.766278,0.762619,0.758959,0.755298,0.751637,0.747975,0.744312,0.740648,0.736984,0.733318,0.729652,0.725984,0.722316,0.718647,0.714976,0.711304,0.707631,0.703957,0.700282,0.696605,0.692927,0.689248,0.685567,0.681884,0.678200,0.674514,0.670827,0.667138,0.663447,0.659755,0.656060,0.652364,0.648665,0.644965,0.641262,0.637557,0.633850,0.630141,0.626429,0.622715,0.618999,0.615279,0.611557,0.607833,0.604105,0.600375,0.596642,0.592906,0.589166,0.585424,0.581678,0.577929,0.574176,0.570420,0.566660,0.562896,0.559128,0.555357,0.551581,0.547801,0.544017,0.540229,0.536436,0.532638,0.528835,0.525028,0.521215,0.517398,0.513575,0.509746,0.505912,0.502073,0.498227,0.494375,0.490517,0.486652,0.482781,0.478903,0.475018,0.471126,0.467227,0.463320,0.459405,0.455481,0.451550,0.447610};

using sensor_msgs::JointState;

void jointStatesCallback(const JointState::ConstPtr& msg)
{
  for (int i = 0; i < msg->name.size(); i++)
  {
    if (msg->name[i] == "central_drive_to_monoboom")
    {
      // Look for closest match to position
      double current_min = M_2_PI;
      int current_min_index = 0;
      for (int j = 0; j < 1000; j++)
      {
        if (fabs(msg->position[i] - (-backhoe_positions[j])) < current_min)
        {
          current_min = msg->position[i];
          current_min_index = j;
        }
      }
      // Output bucket joint state accordingly
      JointState bucket_joint_state;
      bucket_joint_state.name.emplace_back("frame_to_bucket");
      bucket_joint_state.position.push_back(bucket_positions[current_min_index] - M_PI_2);
      bucket_joint_state.effort.push_back(0.0); // TODO Add
      bucket_joint_state.velocity.push_back(0.0); // TODO Add
      bucket_joint_state.header = msg->header;
      pub->publish(bucket_joint_state);
      ROS_INFO("Backhoe: %f, Bucket: %f", msg->position[i], bucket_joint_state.position[0]);
    }
  }
}

int main(int argc, char **argv)
{
  ros::init(argc, argv, "backhoe_bucket_mapping");
  ros::NodeHandle n;
  pub = new ros::Publisher(n.advertise<sensor_msgs::JointState>("bucket_joint_states", 1000));
  ros::Subscriber sub = n.subscribe("joint_states", 1000, jointStatesCallback);
  ros::spin();

  return 0;
}